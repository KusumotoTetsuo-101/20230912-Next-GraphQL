import Head from "next/head";
import type { ListTodosQuery } from "@/generated/request";
import {
  useListTodosQuery,
  useAddTodoMutation,
  useUpdateTodoMutation,
  useDeleteTodoMutation,
} from "@/generated/request";
import { useEffect, useState, FormEvent } from "react";
import { IoTrashBinSharp } from "react-icons/io5";

import {
  FormControl,
  FormLabel,
  FormErrorMessage,
  FormHelperText,
  Input,
  Button,
  Box,
  Flex,
  Checkbox,
} from "@chakra-ui/react";

export default function Home() {
  const [todoContent, setTodoContent] = useState("");
  const [todos, setTodos] = useState<ListTodosQuery["listTodos"]>([]);
  const { loading, error, data, refetch } = useListTodosQuery();
  const [addTodoMutation] = useAddTodoMutation();
  const [updateTodoMutation] = useUpdateTodoMutation();
  const [deleteTodoMutation] = useDeleteTodoMutation();

  useEffect(() => {
    setTodos(data?.listTodos ?? []);
  }, [data?.listTodos]);

  if (loading) return <div>loading...</div>;
  if (error) return <div>error...</div>;
  if (!data?.listTodos) return <div>data error...</div>;

  const submitHandler = async (e: FormEvent) => {
    e.preventDefault();
    await addTodoMutation({
      variables: {
        content: todoContent,
      },
    });
    setTodoContent("");
    refetch();
  };

  const updateHandler = async (id: string, current: boolean) => {
    await updateTodoMutation({
      variables: {
        id,
        done: !current,
      },
    });
    refetch();
  };

  const deleteHandler = async (id: string) => {
    await deleteTodoMutation({
      variables: { id },
    });
    refetch();
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <form onSubmit={submitHandler}>
          <FormControl>
            <Flex mt={10} mx={"auto"} maxW={"3xl"} gap={4}>
              <Input
                type="text"
                placeholder="TODOを入力"
                value={todoContent}
                onChange={(e) => {
                  setTodoContent(e.target.value);
                }}
              />
              <Button colorScheme="teal" type="submit">
                Submit
              </Button>
            </Flex>
          </FormControl>
        </form>
        <Box mt={10} mx={"auto"} maxW={"3xl"}>
          {todos.map((todo) => (
            <Flex alignItems={"center"} my={7} gap={2} key={todo.id}>
              <Checkbox
                size={"lg"}
                onClick={() => {
                  updateHandler(todo.id, todo.done);
                }}
              >
                {todo.content}
              </Checkbox>
              <Button
                p={0}
                onClick={() => {
                  deleteHandler(todo.id);
                }}
              >
                <IoTrashBinSharp size={18} />
              </Button>
            </Flex>
          ))}
        </Box>
      </main>
    </>
  );
}
